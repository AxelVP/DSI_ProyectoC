// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @file PidSubscriber.cpp
 *
 */

#include "../topics/killswitch/KillswitchPubSubTypes.h"
#include "../topics/pid/PidPubSubTypes.h"
#include <chrono>

#include <unistd.h>
#include "Navio2/PWM.h"
#include "Navio2/RCOutput_Navio2.h" 
#include "Common/Util.h"
#include <memory> 
#include <time.h>  


#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/domain/DomainParticipant.hpp>
#include <fastdds/dds/topic/TypeSupport.hpp>
#include <fastdds/dds/subscriber/Subscriber.hpp>
#include <fastdds/dds/subscriber/DataReader.hpp>
#include <fastdds/dds/subscriber/DataReaderListener.hpp>
#include <fastdds/dds/subscriber/qos/DataReaderQos.hpp>
#include <fastdds/dds/subscriber/SampleInfo.hpp>


#define PWM_OUTPUT_0 0
#define PWM_OUTPUT_1 1
#define PWM_OUTPUT_2 2
#define PWM_OUTPUT_3 3

#define SERVO_MAX 1400
#define SERVO_MIN 1000
#define SERVO_MED 1200

using namespace eprosima::fastdds::dds;


Pid pid_;


std::unique_ptr <RCOutput> get_rcout()
{
        auto ptr = std::unique_ptr <RCOutput>{ new RCOutput_Navio2() };
        return ptr;


}


class PidSubscriber
{
private:

    DomainParticipant* participant_;

    Subscriber* subscriber_;

    DataReader* reader_;

    Topic* topic_;

    TypeSupport type_;

    class SubListener : public DataReaderListener
    {
    public:

        SubListener()
            : samples_(0)
        {
        }

        ~SubListener() override
        {
        }

        void on_subscription_matched(
                DataReader*,
                const SubscriptionMatchedStatus& info) override
        {
            if (info.current_count_change == 1)
            {
                std::cout << "Subscriber matched." << std::endl;
            }
            else if (info.current_count_change == -1)
            {
                std::cout << "Subscriber unmatched." << std::endl;
            }
            else
            {
                std::cout << info.current_count_change
                        << " is not a valid value for SubscriptionMatchedStatus current count change" << std::endl;
            }
        }

        void on_data_available(
                DataReader* reader) override
        {
            SampleInfo info;
            if (reader->take_next_sample(&pid_, &info) == ReturnCode_t::RETCODE_OK)
            {
                if (info.valid_data)
                {
                    //IMPRIMIR TODOS LOS VALORES
                    //IMPRIMIR TODOS LOS VALORES
                    //IMPRIMIR TODOS LOS VALORES
                    //IMPRIMIR TODOS LOS VALORES
                    
                    std::cout   << "v_1: " << pid_.v_1() << "\n"
                                << "v_2: " << pid_.v_2() << "\n"
                                << "v_3: " << pid_.v_3() << "\n"
                                << "v_4: " << pid_.v_4() << "\n"
                                << std::endl;
                }
            }
        }



        std::atomic_int samples_;

    } listener_;

public:

    PidSubscriber()
        : participant_(nullptr)
        , subscriber_(nullptr)
        , topic_(nullptr)
        , reader_(nullptr)
        , type_(new PidPubSubType())
    {
    }

    virtual ~PidSubscriber()
    {
        if (reader_ != nullptr)
        {
            subscriber_->delete_datareader(reader_);
        }
        if (topic_ != nullptr)
        {
            participant_->delete_topic(topic_);
        }
        if (subscriber_ != nullptr)
        {
            participant_->delete_subscriber(subscriber_);
        }
        DomainParticipantFactory::get_instance()->delete_participant(participant_);
    }

    //!Initialize the subscriber
    bool init()
    {
        DomainParticipantQos participantQos;
        participantQos.name("Participant_subscriber");
        participant_ = DomainParticipantFactory::get_instance()->create_participant(0, participantQos);

        if (participant_ == nullptr)
        {
            return false;
        }

        // Register the Type
        type_.register_type(participant_);

        // Create the subscriptions Topic
        topic_ = participant_->create_topic("PidTopic", "Pid", TOPIC_QOS_DEFAULT);

        if (topic_ == nullptr)
        {
            return false;
        }

        // Create the Subscriber
        subscriber_ = participant_->create_subscriber(SUBSCRIBER_QOS_DEFAULT, nullptr);

        if (subscriber_ == nullptr)
        {
            return false;
        }

        // Create the DataReader
        reader_ = subscriber_->create_datareader(topic_, DATAREADER_QOS_DEFAULT, &listener_);

        if (reader_ == nullptr)
        {
            return false;
        }

        return true;
    }

    //!Run the Subscriber
    void run()
    {
        while(true)
        {
            std::this_thread::sleep_for(std::chrono::milliseconds(100));
        }
    }
};




class KillswitchSubscriber
{
private:

    DomainParticipant* participant_;

    Subscriber* subscriber_;

    DataReader* reader_;

    Topic* topic_;

    TypeSupport type_;

    class SubListener : public DataReaderListener
    {
    public:

        SubListener()
            : samples_(0)
        {
        }

        ~SubListener() override
        {
        }

        void on_subscription_matched(
                DataReader*,
                const SubscriptionMatchedStatus& info) override
        {
            if (info.current_count_change == 1)
            {
                std::cout << "Subscriber matched." << std::endl;
            }
            else if (info.current_count_change == -1)
            {
                std::cout << "Subscriber unmatched." << std::endl;
            }
            else
            {
                std::cout << info.current_count_change
                        << " is not a valid value for SubscriptionMatchedStatus current count change" << std::endl;
            }
        }

        void on_data_available(
                DataReader* reader) override
        {
            SampleInfo info;
            if (reader->take_next_sample(&killswitch_, &info) == ReturnCode_t::RETCODE_OK)
            {
                if (info.valid_data)
                {
                    //IMPRIMIR TODOS LOS VALORES
                    //IMPRIMIR TODOS LOS VALORES
                    //IMPRIMIR TODOS LOS VALORES
                    //IMPRIMIR TODOS LOS VALORES
                    
                    std::cout   << "kills: " << killswitch_.kills() << "\n"
                                << std::endl;
                }
            }
        }

        Killswitch killswitch_;

        std::atomic_int samples_;

    } listener_;

public:

    KillswitchSubscriber()
        : participant_(nullptr)
        , subscriber_(nullptr)
        , topic_(nullptr)
        , reader_(nullptr)
        , type_(new KillswitchPubSubType())
    {
    }

    virtual ~KillswitchSubscriber()
    {
        if (reader_ != nullptr)
        {
            subscriber_->delete_datareader(reader_);
        }
        if (topic_ != nullptr)
        {
            participant_->delete_topic(topic_);
        }
        if (subscriber_ != nullptr)
        {
            participant_->delete_subscriber(subscriber_);
        }
        DomainParticipantFactory::get_instance()->delete_participant(participant_);
    }

    //!Initialize the subscriber
    bool init()
    {
        DomainParticipantQos participantQos;
        participantQos.name("Participant_subscriber");
        participant_ = DomainParticipantFactory::get_instance()->create_participant(0, participantQos);

        if (participant_ == nullptr)
        {
            return false;
        }

        // Register the Type
        type_.register_type(participant_);

        // Create the subscriptions Topic
        topic_ = participant_->create_topic("KillswitchTopic", "Killswitch", TOPIC_QOS_DEFAULT);

        if (topic_ == nullptr)
        {
            return false;
        }

        // Create the Subscriber
        subscriber_ = participant_->create_subscriber(SUBSCRIBER_QOS_DEFAULT, nullptr);

        if (subscriber_ == nullptr)
        {
            return false;
        }

        // Create the DataReader
        reader_ = subscriber_->create_datareader(topic_, DATAREADER_QOS_DEFAULT, &listener_);

        if (reader_ == nullptr)
        {
            return false;
        }

        return true;
    }

};





int main(
        int argc,
        char** argv)
{
    std::cout << "Starting subscriber." << std::endl;
    int samples = 10;

    PidSubscriber* mysubPid = new PidSubscriber();
    KillswitchSubscriber* mysubKillswitch = new KillswitchSubscriber();
    mysubPid->init();
    mysubKillswitch->init();


    auto pwm = get_rcout();

    if (check_apm()) {
        return 1;
    }

    if (getuid()) {
        fprintf(stderr, "Not root. Please launch like this: sudo %s\n", argv[0]);
    }

    if( !(pwm->initialize(PWM_OUTPUT_0))||!(pwm->initialize(PWM_OUTPUT_1))|| !(pwm->initialize(PWM_OUTPUT_2))|| !(pwm->initialize(PWM_OUTPUT_3))) {
        return 1;
    }

	pwm->set_frequency(PWM_OUTPUT_0, 50);
	pwm->set_frequency(PWM_OUTPUT_1, 50);
	pwm->set_frequency(PWM_OUTPUT_2, 50);
	pwm->set_frequency(PWM_OUTPUT_3, 50);

	if ( !(pwm->enable(PWM_OUTPUT_0))||!(pwm->enable(PWM_OUTPUT_1))||!(pwm->enable(PWM_OUTPUT_2))||!(pwm->enable(PWM_OUTPUT_3)) ) {

	    return 1;
	}

    fprintf(stderr, "Iniciando armado dos motores\n");
	pwm->set_duty_cycle(PWM_OUTPUT_0,SERVO_MIN);
	pwm->set_duty_cycle(PWM_OUTPUT_1,SERVO_MIN);
    pwm->set_duty_cycle(PWM_OUTPUT_2,SERVO_MIN);
    pwm->set_duty_cycle(PWM_OUTPUT_3,SERVO_MIN); 
    sleep(4);
    pwm->set_duty_cycle(PWM_OUTPUT_0,1100);
    pwm->set_duty_cycle(PWM_OUTPUT_1,1100);
    pwm->set_duty_cycle(PWM_OUTPUT_2,1100);
    pwm->set_duty_cycle(PWM_OUTPUT_3,1100); 
    sleep(2);
    pwm->set_duty_cycle(PWM_OUTPUT_0,SERVO_MIN);
    pwm->set_duty_cycle(PWM_OUTPUT_1,SERVO_MIN);
    pwm->set_duty_cycle(PWM_OUTPUT_2,SERVO_MIN);
    pwm->set_duty_cycle(PWM_OUTPUT_3,SERVO_MIN); 
    //	sleep(2);
    fprintf(stderr, "Armado listo\n");
    sleep(2);

    

    while(true){
        /*pwm->set_duty_cycle(PWM_OUTPUT_0, SERVO_MED);                       //pid_.v_1()
        pwm->set_duty_cycle(PWM_OUTPUT_1, SERVO_MED);                       //pid_.v_2()
        pwm->set_duty_cycle(PWM_OUTPUT_2, SERVO_MED);                       //pid_.v_3()
        pwm->set_duty_cycle(PWM_OUTPUT_3, SERVO_MED); */                      //pid_.v_4()
        usleep(20000); 
        /*pwm->set_duty_cycle(PWM_OUTPUT_0, SERVO_MIN);
        pwm->set_duty_cycle(PWM_OUTPUT_1, SERVO_MIN);
        pwm->set_duty_cycle(PWM_OUTPUT_2, SERVO_MIN);
        pwm->set_duty_cycle(PWM_OUTPUT_3, SERVO_MIN);
        usleep(50); */

    }
    

    delete mysubPid;
    delete mysubKillswitch;
    return 0;
}
