// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Mando.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Mando.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

Mando::Mando()
{
    // m_j_izq_ver com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4671e53b
    m_j_izq_ver = 0.0;
    // m_j_der_ver com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2db7a79b
    m_j_der_ver = 0.0;
    // m_j_izq_hor com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6950e31
    m_j_izq_hor = 0.0;
    // m_j_der_hor com.eprosima.idl.parser.typecode.PrimitiveTypeCode@b7dd107
    m_j_der_hor = 0.0;
    // m_p_izq com.eprosima.idl.parser.typecode.PrimitiveTypeCode@42eca56e
    m_p_izq = 0.0;
    // m_p_der com.eprosima.idl.parser.typecode.PrimitiveTypeCode@52f759d7
    m_p_der = 0.0;

}

Mando::~Mando()
{






}

Mando::Mando(
        const Mando& x)
{
    m_j_izq_ver = x.m_j_izq_ver;
    m_j_der_ver = x.m_j_der_ver;
    m_j_izq_hor = x.m_j_izq_hor;
    m_j_der_hor = x.m_j_der_hor;
    m_p_izq = x.m_p_izq;
    m_p_der = x.m_p_der;
}

Mando::Mando(
        Mando&& x)
{
    m_j_izq_ver = x.m_j_izq_ver;
    m_j_der_ver = x.m_j_der_ver;
    m_j_izq_hor = x.m_j_izq_hor;
    m_j_der_hor = x.m_j_der_hor;
    m_p_izq = x.m_p_izq;
    m_p_der = x.m_p_der;
}

Mando& Mando::operator =(
        const Mando& x)
{

    m_j_izq_ver = x.m_j_izq_ver;
    m_j_der_ver = x.m_j_der_ver;
    m_j_izq_hor = x.m_j_izq_hor;
    m_j_der_hor = x.m_j_der_hor;
    m_p_izq = x.m_p_izq;
    m_p_der = x.m_p_der;

    return *this;
}

Mando& Mando::operator =(
        Mando&& x)
{

    m_j_izq_ver = x.m_j_izq_ver;
    m_j_der_ver = x.m_j_der_ver;
    m_j_izq_hor = x.m_j_izq_hor;
    m_j_der_hor = x.m_j_der_hor;
    m_p_izq = x.m_p_izq;
    m_p_der = x.m_p_der;

    return *this;
}

bool Mando::operator ==(
        const Mando& x) const
{

    return (m_j_izq_ver == x.m_j_izq_ver && m_j_der_ver == x.m_j_der_ver && m_j_izq_hor == x.m_j_izq_hor && m_j_der_hor == x.m_j_der_hor && m_p_izq == x.m_p_izq && m_p_der == x.m_p_der);
}

bool Mando::operator !=(
        const Mando& x) const
{
    return !(*this == x);
}

size_t Mando::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t Mando::getCdrSerializedSize(
        const Mando& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void Mando::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_j_izq_ver;
    scdr << m_j_der_ver;
    scdr << m_j_izq_hor;
    scdr << m_j_der_hor;
    scdr << m_p_izq;
    scdr << m_p_der;

}

void Mando::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_j_izq_ver;
    dcdr >> m_j_der_ver;
    dcdr >> m_j_izq_hor;
    dcdr >> m_j_der_hor;
    dcdr >> m_p_izq;
    dcdr >> m_p_der;
}

/*!
 * @brief This function sets a value in member j_izq_ver
 * @param _j_izq_ver New value for member j_izq_ver
 */
void Mando::j_izq_ver(
        float _j_izq_ver)
{
    m_j_izq_ver = _j_izq_ver;
}

/*!
 * @brief This function returns the value of member j_izq_ver
 * @return Value of member j_izq_ver
 */
float Mando::j_izq_ver() const
{
    return m_j_izq_ver;
}

/*!
 * @brief This function returns a reference to member j_izq_ver
 * @return Reference to member j_izq_ver
 */
float& Mando::j_izq_ver()
{
    return m_j_izq_ver;
}

/*!
 * @brief This function sets a value in member j_der_ver
 * @param _j_der_ver New value for member j_der_ver
 */
void Mando::j_der_ver(
        float _j_der_ver)
{
    m_j_der_ver = _j_der_ver;
}

/*!
 * @brief This function returns the value of member j_der_ver
 * @return Value of member j_der_ver
 */
float Mando::j_der_ver() const
{
    return m_j_der_ver;
}

/*!
 * @brief This function returns a reference to member j_der_ver
 * @return Reference to member j_der_ver
 */
float& Mando::j_der_ver()
{
    return m_j_der_ver;
}

/*!
 * @brief This function sets a value in member j_izq_hor
 * @param _j_izq_hor New value for member j_izq_hor
 */
void Mando::j_izq_hor(
        float _j_izq_hor)
{
    m_j_izq_hor = _j_izq_hor;
}

/*!
 * @brief This function returns the value of member j_izq_hor
 * @return Value of member j_izq_hor
 */
float Mando::j_izq_hor() const
{
    return m_j_izq_hor;
}

/*!
 * @brief This function returns a reference to member j_izq_hor
 * @return Reference to member j_izq_hor
 */
float& Mando::j_izq_hor()
{
    return m_j_izq_hor;
}

/*!
 * @brief This function sets a value in member j_der_hor
 * @param _j_der_hor New value for member j_der_hor
 */
void Mando::j_der_hor(
        float _j_der_hor)
{
    m_j_der_hor = _j_der_hor;
}

/*!
 * @brief This function returns the value of member j_der_hor
 * @return Value of member j_der_hor
 */
float Mando::j_der_hor() const
{
    return m_j_der_hor;
}

/*!
 * @brief This function returns a reference to member j_der_hor
 * @return Reference to member j_der_hor
 */
float& Mando::j_der_hor()
{
    return m_j_der_hor;
}

/*!
 * @brief This function sets a value in member p_izq
 * @param _p_izq New value for member p_izq
 */
void Mando::p_izq(
        float _p_izq)
{
    m_p_izq = _p_izq;
}

/*!
 * @brief This function returns the value of member p_izq
 * @return Value of member p_izq
 */
float Mando::p_izq() const
{
    return m_p_izq;
}

/*!
 * @brief This function returns a reference to member p_izq
 * @return Reference to member p_izq
 */
float& Mando::p_izq()
{
    return m_p_izq;
}

/*!
 * @brief This function sets a value in member p_der
 * @param _p_der New value for member p_der
 */
void Mando::p_der(
        float _p_der)
{
    m_p_der = _p_der;
}

/*!
 * @brief This function returns the value of member p_der
 * @return Value of member p_der
 */
float Mando::p_der() const
{
    return m_p_der;
}

/*!
 * @brief This function returns a reference to member p_der
 * @return Reference to member p_der
 */
float& Mando::p_der()
{
    return m_p_der;
}


size_t Mando::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;









    return current_align;
}

bool Mando::isKeyDefined()
{
    return false;
}

void Mando::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
          
}
